@using Client.Auth
@using Contracts.Roles
@using Contracts.Users

@inject NotificationService NotificationService
@inject AuthHttpClientFactory AuthHttpClientFactory

<div class="user-update-panel user-change-panel justify-content-between">
    <UserForm SelectedUser="@SelectedUser"
              OnSave="@OnSave"
              OnDelete="@OnDelete"
              OnCancel="@OnCancel"/>
</div>

@code {
    private HttpClient _client = default!;
    private List<RoleBaseDto> _roles = [];
    private bool _saveButtonDisabled;
    
    /// <summary>
    /// Выбранный пользователь.
    /// </summary>
    [Parameter, EditorRequired] 
    public UserPutDto SelectedUser { get; set; } = default!;

    /// <summary>
    /// Событие сохранения изменений.
    /// </summary>
    [Parameter, EditorRequired] 
    public Action<UserDto>? OnSave { get; set; }
    
    /// <summary>
    /// Событие отмены изменений.
    /// </summary>
    [Parameter, EditorRequired] 
    public Action? OnCancel { get; set; }
    
    /// <summary>
    /// Событие удаления пользователя.
    /// </summary>
    [Parameter, EditorRequired] 
    public Action? OnDelete { get; set; }
    
    protected override void OnInitialized()
    {
        _client = AuthHttpClientFactory.CreateAuthorizedBaseClient();
        base.OnInitialized();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _roles = (await LoadRoles()).Select(role => new RoleBaseDto
            {
                Id = role.Id,
                Name = role.Name
            }).ToList();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private async Task<List<RoleDto>> LoadRoles()
    {
        var response = await _client.GetAsync(RouteConstants.RolesData.GetRolesUrl);
        return await response.Content.ReadFromJsonAsync<List<RoleDto>>() ?? [];
    }
}
