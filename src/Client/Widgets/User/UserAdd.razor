@using Client.Auth
@using Contracts.Roles
@using Contracts.Users

@inject NotificationService NotificationService
@inject AuthHttpClientFactory AuthHttpClientFactory

@if (_selectedRole is null)
{
    <style>
        .user-update-panel {
            gap: 0;
        }
    </style>
    
    <div class="user-update-panel user-change-panel align-items-center justify-content-center">
        <span class="text-headline-small">
            Создать нового пользователя
        </span>
        <span class="text-body mb-3" style="color: var(--light-text-color65) !important;">
            Выберите роль
        </span>
        <div class="roles-grid">
            @foreach (var role in _roles)
            {
                <div class="role-card" @onclick="_ => SelectRole(role)">
                    @role.Name
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="user-update-panel user-change-panel justify-content-between">
        <UserForm SelectedUser="@_selectedUser"
                  OnSave="@OnSave"
                  OnDelete="@OnDelete"
                  OnCancel="@ClearSelectedRole"/>
    </div>
}

@code {
    private HttpClient _client = default!;
    private List<RoleBaseDto> _roles = [];
    
    private RoleBaseDto? _selectedRole;
    private UserPutDto _selectedUser = new();
    private bool _saveButtonDisabled;

    /// <summary>
    /// Событие сохранения изменений.
    /// </summary>
    [Parameter, EditorRequired] 
    public Action<UserDto> OnSave { get; set; } = default!;
    
    /// <summary>
    /// Событие удаления пользователя.
    /// </summary>
    [Parameter, EditorRequired] 
    public Action? OnDelete { get; set; }
    
    protected override void OnInitialized()
    {
        _client = AuthHttpClientFactory.CreateAuthorizedBaseClient();
        base.OnInitialized();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _roles = (await LoadRoles()).Select(role => new RoleBaseDto
            {
                Id = role.Id,
                Name = role.Name
            }).ToList();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private async Task<List<RoleDto>> LoadRoles()
    {
        var response = await _client.GetAsync(RouteConstants.RolesData.GetRolesUrl);
        return await response.Content.ReadFromJsonAsync<List<RoleDto>>() ?? [];
    }

    private void ClearSelectedRole()
    {
        if (_selectedRole is null) return;
        
        _selectedRole = null;
        _selectedUser = new UserPutDto();
        
        StateHasChanged();
    }
    
    private void SelectRole(RoleBaseDto role)
    {
        if (_selectedRole is not null) return;
        
        _selectedRole = role;
        _selectedUser.Role = role;
        
        StateHasChanged();
    }
}